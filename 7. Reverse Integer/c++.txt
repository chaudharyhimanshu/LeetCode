# Approach 1: reverse the integer and check at each iteration whether adding digit will cause an overflow or not.
## Time Complexity : O(n); where n = digits in number
## Space Complexity : O(1)

class Solution {
public:
    int reverse(int x) {
        int ans = 0, last;
        while (x != 0) {
            last = x % 10;
            x /= 10;
            if (ans > INT_MAX/10 || (ans == INT_MAX / 10 && last > 7)) return 0;
            if (ans < INT_MIN/10 || (ans == INT_MIN / 10 && last < -8)) return 0;
            ans = ans * 10 + last;
        }
        return ans;
    }
};